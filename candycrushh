import random

# Dimensiuni matrice
ROWS, COLS = 11, 11

# Valori posibile pentru bomboane (0 - fără bomboană, 1-4 bomboane colorate)
CANDIES = [1, 2, 3, 4]

# Generare matrice inițială cu bomboane aleatorii
def generate_board(rows, cols):
    return [[random.choice(CANDIES) for _ in range(cols)] for _ in range(rows)]

# Detectare linii de 3, 4, 5 bomboane
def find_matches(board):
    score = 0
    matches = set()

    # Detectare linii orizontale
    for r in range(ROWS):
        for c in range(COLS - 2):
            if board[r][c] == board[r][c + 1] == board[r][c + 2] and board[r][c] != 0:
                length = 3
                while c + length < COLS and board[r][c] == board[r][c + length]:
                    length += 1
                if length >= 3:
                    for i in range(length):
                        matches.add((r, c + i))
                    score += {3: 5, 4: 10, 5: 50}[min(length, 5)]
                    c += length - 1

    # Detectare linii verticale
    for c in range(COLS):
        for r in range(ROWS - 2):
            if board[r][c] == board[r + 1][c] == board[r + 2][c] and board[r][c] != 0:
                length = 3
                while r + length < ROWS and board[r][c] == board[r + length][c]:
                    length += 1
                if length >= 3:
                    for i in range(length):
                        matches.add((r + i, c))
                    score += {3: 5, 4: 10, 5: 50}[min(length, 5)]
                    r += length - 1

    return score, matches

# Elimină bomboanele din matrice
def remove_matches(board, matches):
    for r, c in matches:
        board[r][c] = 0

# Funcția care face ca bomboanele de sus să coboare
def drop_candies(board):
    for c in range(COLS):
        empty_row = ROWS - 1
        for r in range(ROWS - 1, -1, -1):
            if board[r][c] != 0:
                board[empty_row][c] = board[r][c]
                if empty_row != r:
                    board[r][c] = 0
                empty_row -= 1

# Umple matricea cu bomboane noi în pozițiile goale
def refill_board(board):
    for r in range(ROWS):
        for c in range(COLS):
            if board[r][c] == 0:
                board[r][c] = random.choice(CANDIES)

# Funcția care caută cele mai bune schimburi
def find_best_swap(board):
    best_swap = None
    max_matches = 0

    for r in range(ROWS):
        for c in range(COLS):
            # Verifică schimbul spre dreapta
            if c < COLS - 1:
                board[r][c], board[r][c + 1] = board[r][c + 1], board[r][c]  # Face schimbul
                score, matches = find_matches(board)  # Verifică formațiunile
                if score > max_matches:  # Dacă este cel mai bun schimb
                    max_matches = score
                    best_swap = (r, c, r, c + 1)  # Salvează coordonatele schimbului
                board[r][c], board[r][c + 1] = board[r][c + 1], board[r][c]  # Revine la starea inițială

            # Verifică schimbul în jos
            if r < ROWS - 1:
                board[r][c], board[r + 1][c] = board[r + 1][c],                 board[r][c]  # Face schimbul
                score, matches = find_matches(board)  # Verifică formațiunile
                if score > max_matches:  # Dacă este cel mai bun schimb
                    max_matches = score
                    best_swap = (r, c, r + 1, c)  # Salvează coordonatele schimbului
                board[r][c], board[r + 1][c] = board[r + 1][c], board[r][c]  # Revine la starea inițială

    return best_swap

# Funcția care simulează un joc complet
def play_game():
    board = generate_board(ROWS, COLS)
    total_score = 0
    moves = 0

    # Continuă jocul până la atingerea a 10.000 puncte
    while total_score < 10000:
        score, matches = find_matches(board)

        if matches:
            total_score += score
            remove_matches(board, matches)
            drop_candies(board)
            refill_board(board)
        else:
            # Caută cel mai bun schimb
            best_swap = find_best_swap(board)
            if best_swap:
                r1, c1, r2, c2 = best_swap
                board[r1][c1], board[r2][c2] = board[r2][c2], board[r1][c1]  # Face schimbul
                score, matches = find_matches(board)
                total_score += score
                if matches:
                    remove_matches(board, matches)
                    drop_candies(board)
                    refill_board(board)

        moves += 1

    return total_score, moves

# Simulează 100 de jocuri și calculează media scorurilor și a mutărilor
def simulate_games(num_games=100):
    total_score = 0
    total_moves = 0

    for i in range(num_games):
        score, moves = play_game()
        total_score += score
        total_moves += moves
        print(f"Jocul {i + 1} - Scor: {score}, Mutări: {moves}")

    print(f"\nMedia punctelor după {num_games} jocuri: {total_score / num_games}")
    print(f"Media mutărilor după {num_games} jocuri: {total_moves / num_games}")

# Rularea simulării
simulate_games()
